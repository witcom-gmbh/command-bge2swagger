global-variables:
  environment: &default_environment
    REPO_USERNAME:
      from_secret: reposilite-user-01
    REPO_PASSWORD:
      from_secret: reposilite-secret-01
    CMD_BASE_URL: https://rmdb.dev.witcom.services
    REGISTRY:
      from_secret: artifactory-host-01
    USERNAME:
      from_secret: artifactory-user-01
    PASSWORD:
      from_secret: artifactory-password-01
    REGISTRY_ORG: witcom
    REGISTRY_ARTIFACT: command-bge2swagger

kind: pipeline
type: docker
name: default
platform:
  os: linux
  arch: amd64 

steps:

  #  we just take the dependencies-section from the pom-files to build our cache-key
  - name: build dependency-cache-checksum-file
    image: alpine/xml
    commands:
    - xq -r .project.dependencies < ./pom.xml > dependencies.json

  - name: restore-cache
    image: meltwater/drone-cache
    volumes:
    - name: cache
      path: /drone/cache
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: s3_cache_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: s3_cache_access_key_secret
    pull: true
    settings:
      cache_key: '{{ checksum "./dependencies.json" }}'
      restore: true
      bucket: drone-gh-01
      region: us-east-1
      endpoint: https://s3.witcom.cloud
      path_style: true
      mount:
        - '/drone/cache'

  - name: Fix permissions on build-cache directory
    image: alpine
    volumes:  
    - name: cache
      path: /drone/cache
    commands:
    - chown -R 1001:0 /drone/cache && chmod -R g+=wrx /drone/cache

  - name: Build & test
    image: maven:3-eclipse-temurin-17
    environment:
      <<: *default_environment
    volumes:
    - name: cache
      path: /drone/cache
    - name: build-output
      path: /app-build      
    commands:
    - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V -Dmaven.repo.local=/drone/cache
    - mvn test -B -V -Dmaven.repo.local=/drone/cache
    - cp target/bge2swagger-*.jar /app-build/bge2swagger.jar

  - name: rebuild-cache
    image: meltwater/drone-cache
    volumes:
    - name: cache
      path: /drone/cache
    pull: true
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: s3_cache_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: s3_cache_access_key_secret
    settings:
      rebuild: true
      cache_key: '{{ checksum "./dependencies.json" }}'
      bucket: drone-gh-01
      region: us-east-1
      endpoint: https://s3.witcom.cloud
      path_style: true
      mount:
        - '/drone/cache'

  - name: Prepare registry secrets
    image: alpine
    volumes:  
    - name: dockerconfig
      path: /dockerconfig
    environment:
      DOCKER_CONFIG:
        from_secret: artifactory-dockerconfig-01
    commands:
    - echo "$DOCKER_CONFIG" > /dockerconfig/config.json

  - name: Build image and push to latest
    image: gcr.io/kaniko-project/executor:debug
    environment:
      <<: *default_environment
    volumes:
    - name: build-output
      path: /app-build
    - name: dockerconfig
      path: /kaniko/.docker
    commands:
    - >
      /kaniko/executor 
      --context /app-build 
      --dockerfile Dockerfile
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:latest
#      --no-push  
    when:
      event:
        exclude:
        - tag
        include:
        - push
      branch:
      - main

  - name: Build and release image
    image: gcr.io/kaniko-project/executor:debug
    environment:
      <<: *default_environment
    volumes:
    - name: build-output
      path: /app-build
    - name: dockerconfig
      path: /kaniko/.docker
    commands:
    - >
      /kaniko/executor 
      --context /app-build 
      --dockerfile Dockerfile
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:latest
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:${DRONE_TAG}
    when:
      event:
      - tag
      ref:
      - refs/tags/v*

  - name: create settings.xml for maven deployments
    image: alpine:latest
    environment:
      REPO_USERNAME:
        from_secret: reposilite-user-01
      REPO_PASSWORD:
        from_secret: reposilite-secret-01
    commands:
      - echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"><servers><server><id>maven-snapshots</id><username>'$REPO_USERNAME'</username><password>'$REPO_PASSWORD'</password></server><server><id>maven-releases</id><username>'$REPO_USERNAME'</username><password>'$REPO_PASSWORD'</password></server></servers></settings>' > settings.xml
    # when:
    #   event:
    #   - tag
    #   ref:
    #   - refs/tags/v*

  - name: Deploy release to maven
    image: maven:3-eclipse-temurin-17
    environment:
      <<: *default_environment
    volumes:
    - name: cache
      path: /drone/cache
    commands:
    - mvn deploy -DskipTests=true -B -Dmaven.repo.local=/drone/cache -gs settings.xml
    when:
      event:
      - tag
      ref:
      - refs/tags/v*

  - name: Deploy snapshot to maven
    image: maven:3-eclipse-temurin-17
    environment:
      <<: *default_environment
    volumes:
    - name: cache
      path: /drone/cache
    commands:
    - mvn deploy -DskipTests=true -B -Dmaven.repo.local=/drone/cache -gs settings.xml
    when:
      event:
        exclude:
        - tag
        include:
        - push
      branch:
      - main

volumes:
- name: cache
  temp: {}
- name: build-output
  temp: {}
- name: dockerconfig
  temp: {}

trigger:
  event:
  - tag
  - push
  - pull_request
